package main;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.Stack;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import operatingSystem.Kernel;

/**
 *
 * @author Caroline
 */
public class MyKernel implements Kernel {
	
	public Diretorio dirRaiz = new Diretorio("/", null);
	public Diretorio dirAtual;
	public Diretorio dirAntigo;

    public MyKernel() {
    	this.dirRaiz = new Diretorio("/", null);
    	this.dirAtual = null;
    	this.dirAntigo = null;
    }
    
    
    //função não está sendo utilizada
    boolean isPathRelative(String path) {
    	if (!path.equals("")) {
	    	if (path.charAt(0) == '/') {
	    		return false;
	    	}
    	}
    	return true;
    }
    
    //verifica se há flags na entrada do programa
    boolean argParser(String parameters, String flag) {
    	if(parameters.contains("-" + flag)) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }
    
    //pega o caminho completo do path
    String getCaminhoCompleto(Diretorio dir) {
    	Stack<String> pilha = new Stack<String>();
    	while(!dir.getNome().equals("/")) {
    		pilha.push(dir.getNome());
    		dir = dir.getPai();
    	}
    	String caminho = "/";
    	int pilhaSize = pilha.size();
    	for(int i = 0; i < pilhaSize; i++) {
    		caminho = caminho.concat(pilha.pop() + "/");
    	}
    	return caminho;
    }

    public String ls(String parameters) {
    	String result = "";
        String[] currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");
        String[] path = null;
        String[] param = parameters.split(" ");
    	Diretorio curDir = dirRaiz;
    	
    	//encontra o diretório atual
    	for(int i = 1; i < currentDir.length; i++) {
    		curDir = curDir.buscaDiretorioPeloNome(currentDir[i]);
    	}
    	
    	if(param.length == 2) {
    		path = param[1].split("/");
    	}
    	else if((param.length == 1) && (!argParser(param[0], "l"))) {
    		path = param[0].split("/");
    	}
    	else {
    		path = "".split("/");
    	}
    	
//    	//verifica parâmetros
//    	if(param.length == 2) {
//    		path = param[1].split("/");
//    	}
//    	else if(param.length == 1) {
//    		path = param;
//    	}
//    	else {
//    		path = param[0].split("/");
//    	}
    	
    	//encontra caminho do parâmetro
    	
	    for(int i = 0; i < path.length; i++) {
	   		if(path[i] == "") {
	   			continue;
	   		}
	   		if(path[i].contains(".")) {
	    		curDir = curDir.buscaDiretorioPeloNome(path[i]);
	   			continue;
	   		}
	   		if(curDir.buscaDiretorioPeloNome(path[i]) != null) {
	    		if(i == path.length - 1) {
	    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
	    			break;
		   		}
	   		}
	   		else {        			
       			result = path[i].concat(": Diretório não existe.");
	   			return result;
    		}
    		curDir = curDir.buscaDiretorioPeloNome(path[i]);
    	}
     	
     	//lista conteúdo do diretório
     	if(argParser(parameters, "l")) {
     		for(int i = 0; i < curDir.getFilhos().size(); i++) {
     			result = result.concat(curDir.getFilhos().get(i).getPermissao() + " " +
     					curDir.getFilhos().get(i).getDataCriacaoFormatada() + " " +
     					curDir.getFilhos().get(i).getNome() + "\n");
         	}
     	} else {
     		for(int i = 0; i < curDir.getFilhos().size(); i++) {
         		result = result.concat(curDir.getFilhos().get(i).getNome()) + " ";
         	}
     	}
     	
        return result;
    }

    public String mkdir(String parameters) {
    	String result = "";
        String[] currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");
        String[] path = parameters.split("/");
    	Diretorio curDir = dirRaiz;
    	
    	//encontra o diretório atual
    	for(int i = 1; i < currentDir.length; i++) {
    		curDir = curDir.buscaDiretorioPeloNome(currentDir[i]);
    	}
    	
    	//verifica existência do diretório e cria
    	for(int i = 0; i < path.length; i++) {
    		if(path[i] == "") {
    			continue;
    		}
    		if(path[i].contains(".")) {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    			continue;
    		}
    		if(curDir.buscaDiretorioPeloNome(path[i]) != null) {
	    		if(i == path.length - 1) {
	    			result = "mkdir: " + path[i] + ": Diretorio já existe (Nenhum diretorio foi criado).";
	    			break;
	   			}
   			}
       		else {        			
       			curDir.criaDiretorioFilho(path[i], curDir);
    		}
    		curDir = curDir.buscaDiretorioPeloNome(path[i]);
    	}
    	
        return result;
    }

    public String cd(String parameters) {
    	String result = "";
    	String currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir;
        String[] cDir = currentDir.split("/");
        String[] path = parameters.split("/");
    	Diretorio curDir = dirRaiz;
    	dirRaiz.setPai(dirRaiz);
    	
    	//encontra o diretório atual
    	for(int i = 1; i < cDir.length; i++) {
    		curDir = curDir.buscaDiretorioPeloNome(cDir[i]);
    	}
    	
    	//verifica se diretório do parâmetro existe
    	for(int i = 0; i < path.length; i++) {
    		if(path[i].contains(".")) {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    			continue;
    		}
    		if(curDir.buscaDiretorioPeloNome(path[i]) != null) {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
   			}
       		else {        			
       			result = path[i].concat(": Diretório não existe.");
	   			return result;
    		}
    	}
    	
        //indica o novo diretório
		for(int i = 0; i < path.length; i++) {
			if(path[i].contains(".")) {
				currentDir = getCaminhoCompleto(curDir);
			}
			else {
				if (currentDir.charAt(currentDir.length()-1) == '/') {
					currentDir = currentDir.concat(path[i]);
				}
				else {
					currentDir = currentDir.concat("/" + path[i]);
				}
    		}
    	}
		
        //setando parte gráfica do diretorio atual
        operatingSystem.fileSystem.FileSytemSimulator.currentDir = currentDir;

        return result;
    }

    public String rmdir(String parameters) {
        String result = "";
        String[] currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");
        String[] path = parameters.split("/");
    	Diretorio curDir = dirRaiz;
    	
    	//encontra o diretório atual
    	for(int i = 1; i < currentDir.length; i++) {
    		curDir = curDir.buscaDiretorioPeloNome(currentDir[i]);
    	}
    	
    	//localiza o diretório a ser removido
    	for(int i = 0; i < path.length; i++) {
    		if(path[i].contains(".")) {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    			continue;
    		}
    		else if (curDir.buscaDiretorioPeloNome(path[i]) == null) {
    			result = "rmdir: Diretório: " + path + " não existe. (Nada foi removido)";
    			break;
    		}
    		else {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    		}
    	}
    	
    	if(curDir.getFilhos().isEmpty()) {
			curDir.getPai().getFilhos().remove(curDir);
		}
		else {
			result = "rmdir: Diretório: " + parameters + " possui arquivos e/ou diretórios. (Nada foi removido)";
		}
    	
        return result;
    }

    public String cp(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: cp");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        //fim da implementacao do aluno
        return result;
    }

    public String mv(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: mv");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        String[] path = parameters.split(" ");
    	Diretorio curDir = null;
    	String[] currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");

//    	if(isPathRelative(parameters)) {
//    		String[] index = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");
//    		curDir = dirRaiz;
//    		for(int i = 1; i < index.length; i++) {
//    			curDir = curDir.buscaDiretorioPeloNome(index[i]);
//    		}
//    		if (!parameters.equals("")) {
//    			for(int i = 0; i < path.length; i++) {
//        			curDir = curDir.buscaDiretorioPeloNome(path[i]);
//        		}
//        	}
//    	}
//    	else {
//    		curDir = dirRaiz;
//    		for(int i = 1; i < path.length; i++) {
//    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
//    		}
//    	}
    	
    	String origem = path[0];
    	String destino = path[1];
    	Diretorio dirOrigem = dirRaiz;
    	Diretorio dirDestino = dirRaiz;
    	Diretorio dirAux = null;
    	
    	for(int i = 0; i < origem.length(); i++) {
    		dirOrigem = dirOrigem.buscaDiretorioPeloNome(origem);
    		
    	}
    	
    	for(int i = 0; i < destino.length(); i++) {
    		dirDestino = dirDestino.buscaDiretorioPeloNome(destino);
    	}
    	
    	for(int i = 0; i < destino.length(); i++) {
    		if(dirOrigem.getPai().getFilhos().get(i) == dirOrigem) {
    			dirAux = dirOrigem.getPai().getFilhos().remove(i);
    		}
    	}
    	
    	dirDestino.getFilhos().add(dirAux);
    	
        //fim da implementacao do aluno
        return result;
    }

    public String rm(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: rm");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        //fim da implementacao do aluno
        return result;
    }

    public String chmod(String parameters) {
        String result = "";
    	String[] currentDir = operatingSystem.fileSystem.FileSytemSimulator.currentDir.split("/");
        String[] in = parameters.split(" ");
        String[] path;
    	Diretorio curDir = dirRaiz;
    	Arquivo file = null;
    	
    	//separa o caminho no parâmetro
    	if(in.length == 3) {
    		path = in[2].split("/");
    	} 
    	else {
    		path = in[1].split("/");
    	}
    	
    	//encontra o diretório atual
    	for(int i = 1; i < currentDir.length; i++) {
    		curDir = curDir.buscaDiretorioPeloNome(currentDir[i]);
    	}
    	
    	//localiza o objeto a ser alterado
    	for(int i = 0; i < path.length; i++) {
    		if(path[i].contains(".")) {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    			continue;
    		}
    		else if (curDir.buscaDiretorioPeloNome(path[i]) == null) {
    			result = "rmdir: Diretório: " + path + " não existe. (Nada foi alterado)";
    			break;
    		}
    		else {
    			curDir = curDir.buscaDiretorioPeloNome(path[i]);
    		}
    	}
    	
		String newMod = in[0];
		int digits[] = new int[3];
		int READ = 4, WRITE = 2, EXECUTE = 1;
		String oldPer = curDir.getPermissao();
		String newPer = Character.toString(oldPer.charAt(0));
		
		digits[0] = Character.digit(newMod.charAt(0), 10);
		digits[1] = Character.digit(newMod.charAt(1), 10);
		digits[2] = Character.digit(newMod.charAt(2), 10);
		
		//seta nova permissão
		for(int i = 0; i < 3; i++) {
			if((digits[i] & READ) == READ){
    			newPer = newPer.concat("r");
    		}
			else {
    			newPer = newPer.concat("-");
    		}
   			if((digits[i] & WRITE) == WRITE) {
   				newPer = newPer.concat("w");
   			}
   			else {
   				newPer = newPer.concat("-");
    		}
   			if((digits[i] & EXECUTE) == EXECUTE) {
   				newPer = newPer.concat("x");
    		}
   					else {
    			newPer = newPer.concat("-");
    		}
		}
		curDir.setPermissao(newPer);
		
		//seta nova permissão recursivamente
		if(argParser(parameters, "R")) {
			for(int i = 0; i < curDir.getFilhos().size(); i++) {
				curDir.getFilhos().get(i).setPermissao(newPer);
         	}
		}
        
        return result;
    }

    public String createfile(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: createfile");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        //fim da implementacao do aluno
        return result;
    }

    public String cat(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: cat");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        //fim da implementacao do aluno
        return result;
    }

    public String batch(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: batch");
        System.out.println("\tParametros: " + parameters);

        //inicio da implementacao do aluno
        //fim da implementacao do aluno
        return result;
    }

    public String dump(String parameters) {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: dump");
        System.out.println("\tParametros: " + parameters);
   
        //inicio
        //fim
        
        return result;
    }

    public String info() {
        //variavel result deverah conter o que vai ser impresso na tela apos comando do usuário
        String result = "";
        System.out.println("Chamada de Sistema: info");
        System.out.println("\tParametros: sem parametros");

        //nome do aluno
        String name = "Caroline Melo";
        //numero de matricula
        String registration = "2021.11.02.00.09";
        //versao do sistema de arquivos
        String version = "0.1";

        result += "Nome do Aluno:        " + name;
        result += "\nMatricula do Aluno:   " + registration;
        result += "\nVersao do Kernel:     " + version;

        return result;
    }

}
